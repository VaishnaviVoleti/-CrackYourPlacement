class Solution {
    void neighbors(int i,int j,vector<vector<int>>& board,int m,int n,int &count){
        vector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}, {-1, -1}, {-1, 1}, {1, -1}, {1, 1}};
        for(auto dr:directions){
            int di = i+dr.first;
            int dj = j+dr.second;
            if(di>=0 && di<m && dj>=0 && dj<n && abs(board[di][dj])==1)
                count++;
        }
    }
    
public:
    void gameOfLife(vector<vector<int>>& board) {
        int m = board.size(),n=board[0].size();
       
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                int count = 0;
                neighbors(i,j,board,m,n,count);
                if(board[i][j]==1 && (count<2 || count>3)){
                    board[i][j] = -1;
                }
                if (board[i][j] == 0 && count == 3) {
                    board[i][j] = 2; // Mark cell to come to life
                }
            }
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(board[i][j]==-1)
                    board[i][j] = 0;
                if(board[i][j]==2)
                    board[i][j] = 1;
            }
        }
    }
};
