class Solution {
public:
    void BFS(int row,int col,vector<vector<int>>&vis,vector<vector<char>>&grid){
        vis[row][col] = 1;
        queue<pair<int,int>>q;
        q.push({row,col});
        int m = grid.size();
        int n = grid[0].size();
        while(!q.empty()){
            row = q.front().first;
            col = q.front().second;
            q.pop();
            int drow[4] = {-1,1,0,0};
            int dcol[4] = {0,0,-1,1};
            for(int i=0;i<4;i++){
           
                int nrow = row+drow[i];
                int ncol = col+dcol[i];
                if(nrow>=0 && nrow<m && ncol>=0 && ncol<n && grid[nrow][ncol]=='1' && vis[nrow][ncol]!=1){
                    vis[nrow][ncol] = 1;
                    q.push({nrow,ncol});
                }
            
        }
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>>vis(m,vector<int>(n,0));
        int cnt = 0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(vis[i][j]==0 & grid[i][j]=='1'){
                    cnt++;
                    BFS(i,j,vis,grid);
                }
            }
        }
        return cnt;
    }
};
