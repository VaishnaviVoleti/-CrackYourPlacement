class Solution
{
    private:
    void DFS(int node,vector<vector<int>>& adj,stack<int>&st,vector<int>&vis){
        vis[node] = 1;
        for(auto it:adj[node]){
            if(!vis[it])
                DFS(it,adj,st,vis);
        }
        st.push(node);
    }
    private:
    void DFS2(int node,vector<vector<int>>& adjT,vector<int>&vis){
        vis[node] = 1;
        for(auto it:adjT[node]){
            if(!vis[it])
                DFS2(it,adjT,vis);
        }
    }
	public:
	//Function to find number of strongly connected components in the graph.
    int kosaraju(int V, vector<vector<int>>& adj)
    {
        //code here
        // Step 1: Perform DFS to fill the stack with vertices based on finish times
        stack<int>st;
        vector<int>vis(V,0);
        for(int i=0;i<V;i++){
            if(!vis[i]){
                DFS(i,adj,st,vis);
            }
        }
        // Step 2: Create the transpose of the graph
        vector<vector<int>>adjT(V);
        for(int i=0;i<V;i++){
            vis[i] = 0;
            for(auto it:adj[i]){
                adjT[it].push_back(i);
            }
        }
        // Step 3: Perform DFS on the transposed graph in the order defined by the stack
        int sc = 0;
        while(!st.empty()){
           int node = st.top();
           st.pop();
           if(!vis[node]){
            sc++;
            DFS2(node,adjT,vis);}
        }
        return sc;
    }
};
